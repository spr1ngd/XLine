// Copyright spr1ngd.

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"

// TODO: INSTANCED_STEREO

Buffer<float> PositionBuffer;
Buffer<float> SegmentWidthBuffer;
uint VertexNums;

#ifndef VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK
#define VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
#endif

struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	half4  Color    : ATTRIBUTE1;
	float2 TexCoord	: ATTRIBUTE2;
	uint   VertexId : SV_VertexID;
	
	VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
};

struct FPositionOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	uint   VertexId : SV_VertexID;

	VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
};

struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;
	float4 Normal   : ATTRIBUTE2;
	uint   VertexId : SV_VertexID;
	
	VF_INSTANCED_STEREO_DECLARE_INPUT_BLOCK()
};

struct FVertexFactoryIntermediates
{
	FSceneDataIntermediates SceneData;
	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half    TangentToWorldSign;
	half4   Color;
	float3  Position;
	float4  WorldPosition;
	float2  TexCoord;
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

	half4	Color : COLOR0;
	float2  TexCoord : TEXCOORD0;
};

FPrimitiveSceneData GetPrimitiveData( FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.SceneData.Primitive;
}

float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if INTERPOLATE_VERTEX_COLOR
	return Interpolants.Color;
#else
	return 0;
#endif
}

float2 GetVerticalVector(float2 V)
{
	float Radian = PI * 0.5;
	float2x2 R = float2x2( cos(Radian), -sin(Radian),
						   sin(Radian),  cos(Radian));
	return mul(V, R);
}

// input vector should be normalized
float2 GetMiddleVector(float2 A, float2 B)
{
	float radian = acos(dot(A, B));
	float s      = sign(cross(float3(A, 0), float3(B, 0)).z);
	float halfRadian = -s * radian * 0.5;
	float2x2 R = float2x2( cos(halfRadian), -sin(halfRadian),
						   sin(halfRadian),  cos(halfRadian));
	return mul(A, R);
}

float GetSegmentWidth( uint VertexId )
{
	// TODO: read segment width from buffer
	return 20.f * .5f;
}

struct FXContext
{
	float3 Last;
	float3 Start;
	float3 End;
	float3 Next;

	float4 LastSS;
	float4 StartSS;
	float4 EndSS;
	float4 NextSS;
	
	bool bStart;
	bool bTop;
	float2 DirectionInScreenSpace;
	float2 CornerOffset;
	float2 MiddleDirection; // if bStart true , it's last-start-end, otherwise start-end-next
	float Radian;
	float Radian2;
	float Sign; // cross vector direction

	float3 GetPoint()
	{
		return bStart ? Start : End;
	}

	float4 GetPointSS()
	{
		return bStart ? StartSS : EndSS;
	}

	float2 GetMiddleDirection()
	{
		float2 OffsetDirection = MiddleDirection;
		OffsetDirection *= bTop ? 1 : -1;
		return OffsetDirection;
	}
};

float2 AdaptViewSize( float2 ScreenSpacePosition )
{
	float2 ViewSize = ResolvedView.ViewSizeAndInvSize.xy;
	return ScreenSpacePosition * ViewSize;
}

float4 TransformLocalToScreenSpace(float3 LocalPosition)
{
	// transform local to world
	float4 TranslatedWorldPosition = TransformLocalToTranslatedWorld(LocalPosition);
	// transform world to screen space
	float4 ClipSpacePosition = mul( float4(LWCToFloat(TranslatedWorldPosition).xyz, 1.0), LWCHackToFloat(PrimaryView.TranslatedWorldToClip));
	float3 NDC = ClipSpacePosition.xyz / ClipSpacePosition.w;
	float4 ScreenSpacePosition = float4( NDC.x * 0.5 + 0.5, NDC.y * -0.5 + 0.5, NDC.z, ClipSpacePosition.w);
	ScreenSpacePosition.xy = AdaptViewSize(ScreenSpacePosition.xy);
	return ScreenSpacePosition;
}

float4 TransformScreenSpaceToTranslatedWorld(float4 ScreenSpacePosition)
{
	float NDCz = ScreenSpacePosition.z;
	float ClipW = ScreenSpacePosition.w;

	float3 NDC = float3(
		(ScreenSpacePosition.x - 0.5) * 2,
		(ScreenSpacePosition.y - 0.5) * -2,
		NDCz);

	float4 ClipSpacePosition = float4(NDC, 1) * ClipW;
	return mul(ClipSpacePosition, LWCHackToFloat(PrimaryView.ClipToTranslatedWorld));
}

float3 GetPositionFromBuffer( uint Index )
{
	float3 Position = 0;
	Position.x = PositionBuffer[Index * 3 + 0];
	Position.y = PositionBuffer[Index * 3 + 1];
	Position.z = PositionBuffer[Index * 3 + 2];
	return Position;
}

FXContext GetXContext( in uint VertexId, in float XLineWidth )
{
	FXContext Context = (FXContext)0;
	
	Context.bStart = VertexId % 4 <= 1;
	Context.bTop   = VertexId % 2 == 0;

	uint GroupIndex = floor(VertexId / 4);
	uint GroupMinIndex = GroupIndex * 4;

	uint StartIndex = GroupMinIndex;
	uint EndIndex = StartIndex + 2;
	
	uint LastIndex = max(StartIndex - 4, 0);
	uint NextIndex = min(EndIndex + 4, VertexNums - 1);
	
	Context.Last  = GetPositionFromBuffer(LastIndex);
	Context.Start = GetPositionFromBuffer(StartIndex);
	Context.End   = GetPositionFromBuffer(EndIndex);
	Context.Next  = GetPositionFromBuffer(NextIndex);

	Context.LastSS  = TransformLocalToScreenSpace(Context.Last);
	Context.StartSS = TransformLocalToScreenSpace(Context.Start);
	Context.EndSS   = TransformLocalToScreenSpace(Context.End);
	Context.NextSS  = TransformLocalToScreenSpace(Context.Next);

	Context.DirectionInScreenSpace = normalize(Context.EndSS.xy - Context.StartSS.xy);

	if( Context.bStart )
	{
		float2 SL = normalize(Context.LastSS.xy - Context.StartSS.xy);
		float2 SE = normalize(Context.EndSS.xy  - Context.StartSS.xy);
		float2 Middle = GetMiddleVector(SL, SE); // middle 和 切向量进行夹角计算
		Context.Radian = clamp(acos(dot(SE, SL)), 0.0001, PI);
		Context.Sign = sign(cross(float3(SE, 0), float3(SL, 0)).z);
		Context.MiddleDirection = GetVerticalVector(Context.DirectionInScreenSpace);
		Context.Radian2 = clamp(acos(dot(Middle, Context.MiddleDirection)), 0.001, PI);
	}
	else
	{
		float2 ES = normalize(Context.StartSS.xy - Context.EndSS.xy);
		float2 EN = normalize(Context.NextSS.xy  - Context.EndSS.xy);
		float2 Middle = GetMiddleVector(ES, EN);
		Context.Radian = clamp(acos(dot(EN, ES)), 0.0001, PI);
		Context.Sign = sign(cross(float3(EN, 0), float3(ES, 0)).z);
		Context.MiddleDirection = GetVerticalVector(Context.DirectionInScreenSpace);
		Context.Radian2 = clamp(acos(dot(Middle, Context.MiddleDirection)), 0.001, PI);
	}
	{
		float CornerOffset = tan(Context.Radian2) * XLineWidth;
		CornerOffset = CornerOffset * (Context.bTop ? -1 : 1);
		CornerOffset = CornerOffset * (Context.bStart ? -1 : 1);
		float Threshold = ((Context.Radian / PI) * 180) < 30.f ? 0 : 1;
		CornerOffset *= Threshold;
		Context.CornerOffset = Context.DirectionInScreenSpace * CornerOffset;
	}
	
	return Context;
}

float4 GetXLineVertexPosition( in uint VertexId )
{
	// todo: how to use different custom data in different section
	// how to get XLine width
	// 1. get current / previous / next vertex position
	// 2. transform point from world space to screen space
	// 3. calc segments direction in screenspace
	// 4. calc the vertex position in screen space
	// 5. transform vertex position from screen space to world space
	float2 ViewSize = ResolvedView.ViewSizeAndInvSize.xy;
	float2 TexelSize = ResolvedView.ViewSizeAndInvSize.zw;
	float Width = GetSegmentWidth(VertexId);
	FXContext Context = GetXContext(VertexId, Width);
	float2 OffsetDirection = Context.GetMiddleDirection();
	float4 ScreenSpacePosition = Context.GetPointSS();
	float2 PixelSpacePosition = ScreenSpacePosition.xy;
	float2 Offset = OffsetDirection * GetSegmentWidth(VertexId);
	Offset += Context.CornerOffset;
	PixelSpacePosition.xy += Offset;
	ScreenSpacePosition.xy = PixelSpacePosition * TexelSize;
	float4 TranslatedWorldPosition = TransformScreenSpaceToTranslatedWorld(ScreenSpacePosition);
	return TranslatedWorldPosition;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates( FVertexFactoryInput Input )
{
	Input.Color = float4(0,0,0,1);
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	Intermediates.Position = Input.Position.xyz;
	Intermediates.WorldPosition = GetXLineVertexPosition(Input.VertexId);
	Intermediates.Color = Input.Color FCOLOR_COMPONENT_SWIZZLE;
	Intermediates.TexCoord.xy = Input.TexCoord;
	return Intermediates;
}

half3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}

float4 VertexFactoryGetWorldPosition( FPositionOnlyVertexFactoryInput Input )
{
	// return TransformLocalToTranslatedWorld(Input.Position.xyz);
	return GetXLineVertexPosition(Input.VertexId);
}

float4 VertexFactoryGetWorldPosition( FPositionAndNormalOnlyVertexFactoryInput Input )
{
	// return TransformLocalToTranslatedWorld(Input.Position.xyz);
	return GetXLineVertexPosition(Input.VertexId);
}

float4 VertexFactoryGetWorldPosition( FVertexFactoryInput Input,  FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.WorldPosition;
}

float4 VertexFactoryGetPreviousWorldPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
#ifdef DFGetX
	// UE5.4 double float
#else
	return mul(float4(Intermediates.Position, 1),
		LWCMultiplyTranslation(Intermediates.SceneData.InstanceData.PrevLocalToWorld, ResolvedView.PrevPreViewTranslation));
#endif
}

float3 VertexFactoryGetWorldNormal( FPositionAndNormalOnlyVertexFactoryInput Input )
{
	FSceneDataIntermediates SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
	FLWCMatrix LocalToWorld = SceneData.InstanceData.LocalToWorld;
	float3 InvScale = SceneData.InstanceData.InvNonUniformScale;

	float3 Normal = Input.Normal.xyz;
	return RotateLocalToWorld(Normal, LocalToWorld, InvScale);
}

float3 VertexFactoryGetWorldNormal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToWorld[2];
}

float4 VertexFactoryGetRasterizedWorldPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition )
{
	return Intermediates.WorldPosition;
}


#if NUM_TEX_COORD_INTERPOLATORS
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	return Interpolants.TexCoord;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	Interpolants.TexCoord = InValue;
}
#endif

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters )
{
	FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

	Interpolants.TangentToWorld0 = float4(Intermediates.TangentToLocal[0], 0);
	Interpolants.TangentToWorld2 = float4(Intermediates.TangentToLocal[2], Intermediates.TangentToWorldSign);

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
#endif
	Interpolants.TexCoord = Intermediates.TexCoord;
	Interpolants.Color = Intermediates.Color;
	return Interpolants;
}

FMaterialVertexParameters GetMaterialVertexParameters(
	FVertexFactoryInput Input,
	FVertexFactoryIntermediates Intermediates,
	float3 WorldPosition,
	half3x3 TangentToWorld)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;

	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
#if NUM_MATERIAL_TEXCOORDS_VERTEX
	Result.TexCoords[0] = Input.TexCoord.xy;
#endif

#if ENABLE_NEW_HLSL_GENERATOR
	EvaluateVertexMaterialAttributes(Result);
#endif
	
	return Result;
}

FMaterialPixelParameters GetMaterialPixelParameters(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	float4 SvPosition)
{
	FMaterialPixelParameters Result = (FMaterialPixelParameters)0;

	half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;
	Result.VertexColor = GetColor(Interpolants);
#if NUM_TEX_COORD_INTERPOLATORS
	Result.TexCoords[0] = Interpolants.TexCoord;
#endif
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	Result.TwoSidedSign = 1;

	// TODO : CUSTOM DATA

	return Result;
}

#include "/Engine/Private/VertexFactoryDefaultInterface.ush"